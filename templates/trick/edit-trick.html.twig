{% extends './base.html.twig' %}
{% block title %}SnowTricks - Modifier la firgure
{% endblock %}
{% block stylesheets %}
	{{ parent() }}
{% endblock %}


{% block main %}
	<!-- Modal -->
	<div
		class="row d-flex justify-content-center">
		<!-- Background image -->
		<div class="bg-image opacity-75">
			<div class="bloc-title-home-page">
				<h1 class="h1 d-flex justify-content-center text-center text-primary">SnowTricks</h1>
				<p class="fs-3 d-flex justify-content-center p-3 text-center">
					Modification - Le trick !
				</p>
			</div>
		</div>
		<!-- edit form-->
		<div class="row container col-md-10 col-md-offset-1 mt-5 mb-4 shadow p-3 mb-5 bg-body rounded d-flex flex-wrap">
			<h1 class=" mb-3">Modifier le trick :</h1>
			{{ form_start(form , {'attr': {'novalidate': 'novalidate'}}) }}
			<div class="row mb-3">
				<div class="col-sm-6">{{ form_row(form.name) }}</div>
				<div class="col-sm-6">{{ form_row(form.category) }}</div>
			</div>
    <!-- preview iage and video  -->
			<div class="row mb-3">
				<div class="col-sm-6">
					<div id="trick_videos" class="border border-info border-2 rounded m-1 p-1" data-index="{{ form.videos|length > 0 ? form.videos|last.vars.name + 1 : 0 }}" data-prototype="{{ form_widget(form.videos.vars.prototype)|e('html_attr') }}">
						{% for video in form.videos %}
							<div class="collection">
								<iframe width="500" height="315" class="img-thumbnail rounded w-50" src="{{ video.vars.data.urlVideo }}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
								{{ form_row(video) }}
							</div>
						{% endfor %}
					</div>
					<button type="button" class="add_item btn-info rounded text-light p-1 mb-3" data-collection-holder-id="trick_videos">
						<i class="fas fa-plus"></i>
						Videos</button>
				</div>

				<div class="col-sm-6">
					<div id="trick_images" class="border border-info border-2 rounded m-1 p-1" data-index="{{ form.images|length > 0 ? form.images|last.vars.name + 1 : 0 }}" data-prototype="{{ form_widget(form.images.vars.prototype)|e('html_attr') }}">
						{% for image in form.images %}
							<div class="collection">
								<img src="{{ asset( image.vars.data.pathImg ) }}" class="img-thumbnail rounded w-50 "/>
								{{ form_row(image) }}
							</div>
						{% endfor %}
					</div>
					<button type="button" class="add_item btn-info rounded text-light p-1 mb-3" data-collection-holder-id="trick_images">
						<i class="fas fa-plus"></i>
						Images</button>

				</div>
				<div class="row">
					<div class="col">{{ form_row(form.description) }}
					</div>
				</div>
				<button type="submit" class="btn btn-success btn-lg ">
					<i class="fas fa-check"></i>
					Modifier le trick !</button>
				{{ form_rest(form) }}
				{{ form_end(form) }}
			</div>
		</div>
	</div>
{% endblock %}
{% block javascripts %}
<script>
function createElementFromHTML(htmlString) {
var div = document.createElement('div');
div.innerHTML = htmlString.trim();
// Change this to div.childNodes to support multiple top-level nodes.
return div.firstChild;
}
const loadImageFile = (e) => {
var itemView = e.target.closest('.collection').querySelector('img');
if (! itemView) {
const TargetCollection = e.target.closest('.collection');
itemView = document.createElement('img');
itemView.classList.add('img-thumbnail', 'rounded', 'w-50');
itemView.src = URL.createObjectURL(e.target.files[0]);
TargetCollection.insertBefore(itemView, TargetCollection.firstChild);
} else {
itemView.src = URL.createObjectURL(e.target.files[0]);
}
};
const loadVideoFile = (e) => {
var itemView = e.target.closest('.collection').querySelector('iframe')
if (! itemView) {
const TargetCollection = e.target.closest('.collection')
itemView = createElementFromHTML('<iframe width="500" height="315" class="img-thumbnail rounded w-50" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>');
itemView.src = e.target.value;
TargetCollection.insertBefore(itemView, TargetCollection.firstChild);
} else {
itemView.src = e.target.value;
}
};
const addFormToCollection = (e) => {
const collectionHolder = document.getElementById(e.currentTarget.dataset.collectionHolderId);
const itemContainer = document.createElement('div');
itemContainer.classList.add('collection');
const itemTxt = collectionHolder.dataset.prototype.replace(/__name__/g, collectionHolder.dataset.index);
const item = createElementFromHTML(itemTxt);
itemContainer.appendChild(item);
collectionHolder.appendChild(itemContainer);
collectionHolder.dataset.index ++;
itemContainer.querySelector('input').addEventListener('change', (e) => {
e.preventDefault();
if (collectionHolder.id == "trick_images") {
loadImageFile(e);
}
if (collectionHolder.id == "trick_videos") {
loadVideoFile(e);
}
});
// add a delete link to the new form
addTagFormDeleteLink(itemContainer);
};
const addTagFormDeleteLink = (item) => {
const removeFormButton = document.createElement('button');
removeFormButton.classList.add('btn-danger')
removeFormButton.classList.add('rounded')
removeFormButton.classList.add('text-light')
removeFormButton.innerText = 'Suprimer';
item.append(removeFormButton);
removeFormButton.addEventListener('click', (e) => {
e.preventDefault();
// remove the li for the tag form
item.remove();
});
}
document.querySelectorAll('.add_item').forEach(btn => {
btn.addEventListener("click", addFormToCollection)
});
// Add delete button on collection at refresh/load
document.querySelectorAll('.collection').forEach((tag) => {
addTagFormDeleteLink(tag)
})
// show img at refresh/load
document.querySelectorAll('#trick_images input').forEach(btn => {
btn.addEventListener("change", loadImageFile)
});
// show iframeat refresh/load
document.querySelectorAll('#trick_videos input').forEach(btn => {
btn.addEventListener("change", loadVideoFile)
});
	</script>
{% endblock %}